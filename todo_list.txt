# driver insert_one_rowid  插入一条数据，并且返回rowid，
# driver insert_many_rowids 插入多条数据，并且返回rowids
# driver insert_one_count 插入一条数据，并且返回执行的条数
# driver insert_many_count 插入多条数据，并且返回执行的条数
# driver fetch_one
# driver fetch_all

√ # model进行__init__的时候，要根据column的类型，从而进行数据的强制类型转化
√ # model进行from__db的时候，要根据column的类型，把数据进行强制类型转化

# objects 里面有太多的magic，是否考虑env变成全局的，然后全局使用？
# objects 是否考虑变成Repository? 增加对应的Repository接口？
# model变成 纯的domain ？
# 通过 Table来进行migration？并反向关联纯domain的Model？

# model 的 integration tests 需要提前准备好表格和数据库，这个时候的sqlite可以考虑用文件的，不用memory了

# model的查询
model.objects.filter()
model.objects.sql()
model.objects.all()
model.objects.limit(1).first()
model.objects.last()
model.objects.count()
model.objects.exist()
model.objects.max()
model.objects.min()
model.objects.avg()


# model的创建
model.objects.insert(**kwargs: [any])
model.objects.bulk_insert(*args: [dict])
注意：bulk_create()的时候，怎么给model的id赋值呢？


# model的修改
model.objects.update(**kwargs: [any])
model.objects.bulk_update(*args: [dict])
model.objects.filter(...).update(**kwargs: [any])

# model的删除
model.objects.delete(**kwargs: [any])
model.objects.bulk_delete(*args: [dict])
model.objects.filter(...).delete(**kwargs: [any])


# 在adapter通过fetchone或者fetchall后，怎么把结果中的row，转成为一个model

# integration tests中，使用db的连接，需要性能改进，不能每次都去连接，应该共用连接池

=======================
√ 关于sweet的sequel的数据设计。

# 表示基本数据类型, Literal很重要
√ RawType: TypeAlias = Union[int | float | str | Decimal | bool | datetime | date | None | bytes | Literal]

# 增加一个Raw的class，对基本类型进行封装，让Visitor更加好处理
√ class Raw:
    v: RawType

# ArrayType类型
√ ArrayType: TypeAlias = Union[List | Tuple]

# 增加一个Array的class，对ArrayType进行封装，让Visitor更加好处理
# 注意，在 Insert xxx Values 中，Array需要用 [] 连接，其他地方用 () 连接
√ class Array:
    v: ArrayType

√ Fn + Name
   这两者很像，都可以放到Binary里面
   两者都可以做 gt，lt，... 的操作，生成 Binary

√ Binary：
   √ key、op、value
   √ Key 可以接收 RawType, Fn, Name；接收到RawType的时候，内部要转为 the Value class，方便后面的quote
   √ value 可以接收 RawType、Fn, Name 和 Array，接收到 B的时候，内部要转为 the Value class，方便后面的quote
   √ 要支持通过k=v的方式来解析Binary，可以考虑类似于：Binary.parse(username='abc')
   √ 要支持 or 和 not 和 and 操作，即：支持与或非：

√ Q变成一个方法，返回Binary，方便初始化 Binary

√ SelectStatement：
  √ select_cope：
    可以是 RawType、Fn、Name。例如：select `username`；select sum(age)
    可以是 B 类型，即：基本类型。例如：select 1, 'abc'
    可以是 Array类型，但其实内部会展开，并且用 [] 连接起来？

√ InsertStatement：
   Values：可以是一个或者多个：Array，Array里面可以是 B、K 类型或者又是1个Array。
                  如果是Array的时候，最终生成quoted_str，需要用() 连接起来？。

√ Where 和 Having：
  封装了Binary的集合

√ Select + Update + Delete => Where + Having => Q => Binary => Value + K + Array
